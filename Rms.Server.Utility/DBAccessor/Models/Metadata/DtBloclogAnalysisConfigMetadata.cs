//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはテンプレートから生成されました。
//
//     このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//     このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rms.Server.Utility.DBAccessor.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    
    /// <summary>
    /// DtBloclogAnalysisConfigクラス
    /// </summary>
    [ModelMetadataType(typeof(DtBloclogAnalysisConfigModelMetaData))]
    public partial class DtBloclogAnalysisConfig
    {
        /// <summary>
        /// コンストラクタ
        /// </summary>
        public DtBloclogAnalysisConfig()
        {
        }
    
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="model">Rms.Server.Utility.Utility.Models.DtBloclogAnalysisConfigのインスタンス</param>
        public DtBloclogAnalysisConfig(Rms.Server.Utility.Utility.Models.DtBloclogAnalysisConfig model)
        {
            this.Sid = model.Sid;
            this.IsNormalized = model.IsNormalized;
            this.TopUnevennessSkipValue = model.TopUnevennessSkipValue;
            this.BottomUnevennessSkipValue = model.BottomUnevennessSkipValue;
            this.AlsStandardValue = model.AlsStandardValue;
            this.McvStandardValue = model.McvStandardValue;
            this.ScvStandardValue1 = model.ScvStandardValue1;
            this.ScvStandardValue2 = model.ScvStandardValue2;
            this.CreateDatetime = model.CreateDatetime;
            this.UpdateDatetime = model.UpdateDatetime;
        }
    
        /// <summary>
        /// このインスタンスの各プロパティに、引数に指定されたDtBloclogAnalysisConfigのプロパティの値をコピーする
        /// </summary>
        /// <param name="entity">コピー元のDtBloclogAnalysisConfig</param>
        public void CopyFrom(DtBloclogAnalysisConfig entity)
        {
            this.Sid = entity.Sid;
            this.IsNormalized = entity.IsNormalized;
            this.TopUnevennessSkipValue = entity.TopUnevennessSkipValue;
            this.BottomUnevennessSkipValue = entity.BottomUnevennessSkipValue;
            this.AlsStandardValue = entity.AlsStandardValue;
            this.McvStandardValue = entity.McvStandardValue;
            this.ScvStandardValue1 = entity.ScvStandardValue1;
            this.ScvStandardValue2 = entity.ScvStandardValue2;
            this.CreateDatetime = entity.CreateDatetime;
            this.UpdateDatetime = entity.UpdateDatetime;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なRms.Server.Utility.Utility.Models.DtBloclogAnalysisConfig型に変換する。
        /// </summary>
        /// <returns></returns>
        public Rms.Server.Utility.Utility.Models.DtBloclogAnalysisConfig ToModel()
        {
            Rms.Server.Utility.Utility.Models.DtBloclogAnalysisConfig model = new Rms.Server.Utility.Utility.Models.DtBloclogAnalysisConfig();
            model.Sid = this.Sid;
            model.IsNormalized = this.IsNormalized;
            model.TopUnevennessSkipValue = this.TopUnevennessSkipValue;
            model.BottomUnevennessSkipValue = this.BottomUnevennessSkipValue;
            model.AlsStandardValue = this.AlsStandardValue;
            model.McvStandardValue = this.McvStandardValue;
            model.ScvStandardValue1 = this.ScvStandardValue1;
            model.ScvStandardValue2 = this.ScvStandardValue2;
            model.CreateDatetime = this.CreateDatetime;
            model.UpdateDatetime = this.UpdateDatetime;
    
            return model;
        }
    }
    
    /// <summary>
    /// DtBloclogAnalysisConfigのメタデータクラス
    /// </summary>
    public  class DtBloclogAnalysisConfigModelMetaData
    {
        [Key]
        [Required(ErrorMessage = "Sid is required.")]
        public long Sid { get; set; }
    
        [Required(ErrorMessage = "IsNormalized is required.")]
        public bool IsNormalized { get; set; }
    
        [Required(ErrorMessage = "TopUnevennessSkipValue is required.")]
        public int TopUnevennessSkipValue { get; set; }
    
        [Required(ErrorMessage = "BottomUnevennessSkipValue is required.")]
        public int BottomUnevennessSkipValue { get; set; }
    
        [Required(ErrorMessage = "AlsStandardValue is required.")]
        public double AlsStandardValue { get; set; }
    
        [Required(ErrorMessage = "McvStandardValue is required.")]
        public double McvStandardValue { get; set; }
    
        [Required(ErrorMessage = "ScvStandardValue1 is required.")]
        public double ScvStandardValue1 { get; set; }
    
        [Required(ErrorMessage = "ScvStandardValue2 is required.")]
        public double ScvStandardValue2 { get; set; }
    
        [Required(ErrorMessage = "CreateDatetime is required.")]
        public System.DateTime CreateDatetime { get; set; }
    
        [Required(ErrorMessage = "UpdateDatetime is required.")]
        public System.DateTime UpdateDatetime { get; set; }
    
    }
}
