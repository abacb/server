//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはテンプレートから生成されました。
//
//     このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//     このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rms.Server.Operation.DBAccessor.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    
    /// <summary>
    /// DtEquipmentクラス
    /// </summary>
    [ModelMetadataType(typeof(DtEquipmentModelMetaData))]
    public partial class DtEquipment
    {
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="model">Rms.Server.Operation.Utility.Models.DtEquipmentのインスタンス</param>
        public DtEquipment(Rms.Server.Operation.Utility.Models.DtEquipment model)
        {
            this.Sid = model.Sid;
            this.InstallBaseSid = model.InstallBaseSid;
            this.NetworkRouteSid = model.NetworkRouteSid;
            this.TopEquipmentSid = model.TopEquipmentSid;
            this.ParentEquipmentSid = model.ParentEquipmentSid;
            this.Hierarchy = model.Hierarchy;
            this.HierarchyPath = model.HierarchyPath;
            this.HierarchyOrder = model.HierarchyOrder;
            this.EquipmentNumber = model.EquipmentNumber;
            this.HostName = model.HostName;
            this.IpAddress = model.IpAddress;
            this.Description = model.Description;
            this.IsDeleted = model.IsDeleted;
            this.CreateDatetime = model.CreateDatetime;
            this.UpdateDatetime = model.UpdateDatetime;
            this.DtAlarm = model.DtAlarm.Select(y => new DtAlarm(y)).ToHashSet();
            //this.DtEquipment1 = model.DtEquipment1.Select(y => new DtEquipment(y)).ToHashSet();
            //this.DtEquipment11 = model.DtEquipment11.Select(y => new DtEquipment(y)).ToHashSet();
        }
    
        /// <summary>
        /// このインスタンスの各プロパティに、引数に指定されたDtEquipmentのプロパティの値をコピーする
        /// </summary>
        /// <param name="entity">コピー元のDtEquipment</param>
        public void CopyFrom(DtEquipment entity)
        {
            this.Sid = entity.Sid;
            this.InstallBaseSid = entity.InstallBaseSid;
            this.NetworkRouteSid = entity.NetworkRouteSid;
            this.TopEquipmentSid = entity.TopEquipmentSid;
            this.ParentEquipmentSid = entity.ParentEquipmentSid;
            this.Hierarchy = entity.Hierarchy;
            this.HierarchyPath = entity.HierarchyPath;
            this.HierarchyOrder = entity.HierarchyOrder;
            this.EquipmentNumber = entity.EquipmentNumber;
            this.HostName = entity.HostName;
            this.IpAddress = entity.IpAddress;
            this.Description = entity.Description;
            this.IsDeleted = entity.IsDeleted;
            this.CreateDatetime = entity.CreateDatetime;
            this.UpdateDatetime = entity.UpdateDatetime;
            this.DtAlarm = entity.DtAlarm;
            //this.DtEquipment1 = entity.DtEquipment1;
            //this.DtEquipment11 = entity.DtEquipment11;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なRms.Server.Operation.Utility.Models.DtEquipment型に変換する。
        /// </summary>
        /// <returns></returns>
        public Rms.Server.Operation.Utility.Models.DtEquipment ToModel()
        {
            Rms.Server.Operation.Utility.Models.DtEquipment model = new Rms.Server.Operation.Utility.Models.DtEquipment();
            model.Sid = this.Sid;
            model.InstallBaseSid = this.InstallBaseSid;
            model.NetworkRouteSid = this.NetworkRouteSid;
            model.TopEquipmentSid = this.TopEquipmentSid;
            model.ParentEquipmentSid = this.ParentEquipmentSid;
            model.Hierarchy = this.Hierarchy;
            model.HierarchyPath = this.HierarchyPath;
            model.HierarchyOrder = this.HierarchyOrder;
            model.EquipmentNumber = this.EquipmentNumber;
            model.HostName = this.HostName;
            model.IpAddress = this.IpAddress;
            model.Description = this.Description;
            model.IsDeleted = this.IsDeleted;
            model.CreateDatetime = this.CreateDatetime;
            model.UpdateDatetime = this.UpdateDatetime;
            model.DtAlarm = this.DtAlarm.Select(y => y.ToModel()).ToHashSet();
            //model.DtEquipment1 = this.DtEquipment1.Select(y => y.ToModel()).ToHashSet();
            //model.DtEquipment11 = this.DtEquipment11.Select(y => y.ToModel()).ToHashSet();
    
            return model;
        }
    }
    
    /// <summary>
    /// DtEquipmentのメタデータクラス
    /// </summary>
    public  class DtEquipmentModelMetaData
    {
        [Key]
        [Required(ErrorMessage = "Sid is required.")]
        public long Sid { get; set; }
    
        [Required(ErrorMessage = "InstallBaseSid is required.")]
        public long InstallBaseSid { get; set; }
    
        [Required(ErrorMessage = "NetworkRouteSid is required.")]
        public long NetworkRouteSid { get; set; }
    
        [Required(ErrorMessage = "Hierarchy is required.")]
        public byte Hierarchy { get; set; }
    
        [Required(ErrorMessage = "HierarchyPath is required.")]
        [StringLength(100, ErrorMessage = "HierarchyPath length should be less than 100 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "HierarchyPath is only allowed for ASCII code characters.")]
        public string HierarchyPath { get; set; }
    
        [Required(ErrorMessage = "HierarchyOrder is required.")]
        [StringLength(100, ErrorMessage = "HierarchyOrder length should be less than 100 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "HierarchyOrder is only allowed for ASCII code characters.")]
        public string HierarchyOrder { get; set; }
    
        [Required(ErrorMessage = "EquipmentNumber is required.")]
        [StringLength(30, ErrorMessage = "EquipmentNumber length should be less than 30 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "EquipmentNumber is only allowed for ASCII code characters.")]
        public string EquipmentNumber { get; set; }
    
        [StringLength(30, ErrorMessage = "HostName length should be less than 30 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "HostName is only allowed for ASCII code characters.")]
        public string HostName { get; set; }
    
        [StringLength(200, ErrorMessage = "IpAddress length should be less than 200 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "IpAddress is only allowed for ASCII code characters.")]
        public string IpAddress { get; set; }
    
        [StringLength(1024, ErrorMessage = "Description length should be less than 1024 symbols.")]
        public string Description { get; set; }
    
        [Required(ErrorMessage = "CreateDatetime is required.")]
        public System.DateTime CreateDatetime { get; set; }
    
        [Required(ErrorMessage = "UpdateDatetime is required.")]
        public System.DateTime UpdateDatetime { get; set; }
    
    }
}
