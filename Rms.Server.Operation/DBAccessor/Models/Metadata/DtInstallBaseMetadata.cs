//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはテンプレートから生成されました。
//
//     このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//     このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rms.Server.Operation.DBAccessor.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    
    /// <summary>
    /// DtInstallBaseクラス
    /// </summary>
    [ModelMetadataType(typeof(DtInstallBaseModelMetaData))]
    public partial class DtInstallBase
    {
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="model">Rms.Server.Operation.Utility.Models.DtInstallBaseのインスタンス</param>
        public DtInstallBase(Rms.Server.Operation.Utility.Models.DtInstallBase model)
        {
            this.Sid = model.Sid;
            this.EquipmentNumber = model.EquipmentNumber;
            this.EquipmentName = model.EquipmentName;
            this.EquipmentSerialNumber = model.EquipmentSerialNumber;
            this.InstallCompleteDate = model.InstallCompleteDate;
            this.InstallFeatures = model.InstallFeatures;
            this.CustomerNumber = model.CustomerNumber;
            this.CustomerName = model.CustomerName;
            this.ZipCode = model.ZipCode;
            this.Address = model.Address;
            this.Telephone = model.Telephone;
            this.ScssName = model.ScssName;
            this.Outsourcer = model.Outsourcer;
            this.RemoveDate = model.RemoveDate;
            this.ImportCreateDatetime = model.ImportCreateDatetime;
            this.ImportUpdateDatetime = model.ImportUpdateDatetime;
            this.CreateDatetime = model.CreateDatetime;
            this.UpdateDatetime = model.UpdateDatetime;
            this.DtEquipment = new DtEquipment(model.DtEquipment);
        }
    
        /// <summary>
        /// このインスタンスの各プロパティに、引数に指定されたDtInstallBaseのプロパティの値をコピーする
        /// </summary>
        /// <param name="entity">コピー元のDtInstallBase</param>
        public void CopyFrom(DtInstallBase entity)
        {
            this.Sid = entity.Sid;
            this.EquipmentNumber = entity.EquipmentNumber;
            this.EquipmentName = entity.EquipmentName;
            this.EquipmentSerialNumber = entity.EquipmentSerialNumber;
            this.InstallCompleteDate = entity.InstallCompleteDate;
            this.InstallFeatures = entity.InstallFeatures;
            this.CustomerNumber = entity.CustomerNumber;
            this.CustomerName = entity.CustomerName;
            this.ZipCode = entity.ZipCode;
            this.Address = entity.Address;
            this.Telephone = entity.Telephone;
            this.ScssName = entity.ScssName;
            this.Outsourcer = entity.Outsourcer;
            this.RemoveDate = entity.RemoveDate;
            this.ImportCreateDatetime = entity.ImportCreateDatetime;
            this.ImportUpdateDatetime = entity.ImportUpdateDatetime;
            this.CreateDatetime = entity.CreateDatetime;
            this.UpdateDatetime = entity.UpdateDatetime;
            this.DtEquipment = entity.DtEquipment;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なRms.Server.Operation.Utility.Models.DtInstallBase型に変換する。
        /// </summary>
        /// <returns></returns>
        public Rms.Server.Operation.Utility.Models.DtInstallBase ToModel()
        {
            Rms.Server.Operation.Utility.Models.DtInstallBase model = new Rms.Server.Operation.Utility.Models.DtInstallBase();
            model.Sid = this.Sid;
            model.EquipmentNumber = this.EquipmentNumber;
            model.EquipmentName = this.EquipmentName;
            model.EquipmentSerialNumber = this.EquipmentSerialNumber;
            model.InstallCompleteDate = this.InstallCompleteDate;
            model.InstallFeatures = this.InstallFeatures;
            model.CustomerNumber = this.CustomerNumber;
            model.CustomerName = this.CustomerName;
            model.ZipCode = this.ZipCode;
            model.Address = this.Address;
            model.Telephone = this.Telephone;
            model.ScssName = this.ScssName;
            model.Outsourcer = this.Outsourcer;
            model.RemoveDate = this.RemoveDate;
            model.ImportCreateDatetime = this.ImportCreateDatetime;
            model.ImportUpdateDatetime = this.ImportUpdateDatetime;
            model.CreateDatetime = this.CreateDatetime;
            model.UpdateDatetime = this.UpdateDatetime;
            model.DtEquipment = this.DtEquipment.ToModel();
    
            return model;
        }
    }
    
    /// <summary>
    /// DtInstallBaseのメタデータクラス
    /// </summary>
    public  class DtInstallBaseModelMetaData
    {
        [Key]
        [Required(ErrorMessage = "Sid is required.")]
        public long Sid { get; set; }
    
        [Required(ErrorMessage = "EquipmentNumber is required.")]
        [StringLength(30, ErrorMessage = "EquipmentNumber length should be less than 30 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "EquipmentNumber is only allowed for ASCII code characters.")]
        public string EquipmentNumber { get; set; }
    
        [StringLength(60, ErrorMessage = "EquipmentName length should be less than 60 symbols.")]
        public string EquipmentName { get; set; }
    
        [StringLength(30, ErrorMessage = "EquipmentSerialNumber length should be less than 30 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "EquipmentSerialNumber is only allowed for ASCII code characters.")]
        public string EquipmentSerialNumber { get; set; }
    
        [StringLength(64, ErrorMessage = "InstallFeatures length should be less than 64 symbols.")]
        public string InstallFeatures { get; set; }
    
        [StringLength(64, ErrorMessage = "CustomerName length should be less than 64 symbols.")]
        public string CustomerName { get; set; }
    
        [StringLength(40, ErrorMessage = "ZipCode length should be less than 40 symbols.")]
        public string ZipCode { get; set; }
    
        [StringLength(1024, ErrorMessage = "Address length should be less than 1024 symbols.")]
        public string Address { get; set; }
    
        [StringLength(30, ErrorMessage = "Telephone length should be less than 30 symbols.")]
        [RegularExpression(@"^[\x20-\x7e]+$", ErrorMessage = "Telephone is only allowed for ASCII code characters.")]
        public string Telephone { get; set; }
    
        [StringLength(60, ErrorMessage = "ScssName length should be less than 60 symbols.")]
        public string ScssName { get; set; }
    
        [StringLength(60, ErrorMessage = "Outsourcer length should be less than 60 symbols.")]
        public string Outsourcer { get; set; }
    
    }
}
