//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはテンプレートから生成されました。
//
//     このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//     このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rms.Server.Core.DBAccessor.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    
    /// <summary>
    /// DtDeliveryFileクラス
    /// </summary>
    [ModelMetadataType(typeof(DtDeliveryFileModelMetaData))]
    public partial class DtDeliveryFile
    {
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="model">Utility.Models.Entites.DtDeliveryFileのインスタンス</param>
        public DtDeliveryFile(Utility.Models.Entites.DtDeliveryFile model)
        {
            this.Sid = model.Sid;
            this.DeliveryFileTypeSid = model.DeliveryFileTypeSid;
            this.InstallTypeSid = model.InstallTypeSid;
            this.FilePath = model.FilePath;
            this.Version = model.Version;
            this.InstallableVersion = model.InstallableVersion;
            this.Description = model.Description;
            this.InformationId = model.InformationId;
            this.IsCanceled = model.IsCanceled;
            this.CreateDatetime = model.CreateDatetime;
            this.UpdateDatetime = model.UpdateDatetime;
            this.RowVersion = model.RowVersion;
            this.DtDeliveryGroup = model.DtDeliveryGroup.Select(y => new DtDeliveryGroup(y)).ToHashSet();
            this.DtDeliveryModel = model.DtDeliveryModel.Select(y => new DtDeliveryModel(y)).ToHashSet();
            this.DeliveryFileTypeS = model.MtDeliveryFileType == null ?
                null :
                new MtDeliveryFileType(model.MtDeliveryFileType);
            this.InstallTypeS = model.MtInstallType == null ?
                null :
                new MtInstallType(model.MtInstallType);
        }
    
        /// <summary>
        /// このインスタンスの各プロパティに、引数に指定されたDtDeliveryFileのプロパティの値をコピーする
        /// </summary>
        /// <param name="entity">コピー元のDtDeliveryFile</param>
        public void CopyFrom(DtDeliveryFile entity)
        {
            this.Sid = entity.Sid;
            this.DeliveryFileTypeSid = entity.DeliveryFileTypeSid;
            this.InstallTypeSid = entity.InstallTypeSid;
            this.FilePath = entity.FilePath;
            this.Version = entity.Version;
            this.InstallableVersion = entity.InstallableVersion;
            this.Description = entity.Description;
            this.InformationId = entity.InformationId;
            this.IsCanceled = entity.IsCanceled;
            this.CreateDatetime = entity.CreateDatetime;
            this.UpdateDatetime = entity.UpdateDatetime;
            this.RowVersion = entity.RowVersion;
            this.DtDeliveryGroup = entity.DtDeliveryGroup;
            this.DtDeliveryModel = entity.DtDeliveryModel;
            this.DeliveryFileTypeS = entity.DeliveryFileTypeS;
            this.InstallTypeS = entity.InstallTypeS;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtDeliveryFile型に変換する。
        /// 各変換メソッド共通部分
        /// </summary>
        /// <returns></returns>
        private Utility.Models.Entites.DtDeliveryFile ToModelCommonPart()
        {
            Utility.Models.Entites.DtDeliveryFile model = new Utility.Models.Entites.DtDeliveryFile();
            model.Sid = this.Sid;
            model.DeliveryFileTypeSid = this.DeliveryFileTypeSid;
            model.InstallTypeSid = this.InstallTypeSid;
            model.FilePath = this.FilePath;
            model.Version = this.Version;
            model.InstallableVersion = this.InstallableVersion;
            model.Description = this.Description;
            model.InformationId = this.InformationId;
            model.IsCanceled = this.IsCanceled;
            model.CreateDatetime = this.CreateDatetime;
            model.UpdateDatetime = this.UpdateDatetime;
            model.RowVersion = this.RowVersion;
            return model;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtDeliveryFile型に変換する。
        /// </summary>
        /// <returns></returns>
        public Utility.Models.Entites.DtDeliveryFile ToModel()
        {
            Utility.Models.Entites.DtDeliveryFile model = ToModelCommonPart();
            model.DtDeliveryGroup = this.DtDeliveryGroup.Select(y => y.ToChildModel(this.GetType())).ToHashSet();
            model.DtDeliveryModel = this.DtDeliveryModel.Select(y => y.ToChildModel(this.GetType())).ToHashSet();
            model.MtDeliveryFileType = this.DeliveryFileTypeS?.ToParentModel(this.GetType());
            model.MtInstallType = this.InstallTypeS?.ToParentModel(this.GetType());
    
            return model;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtDeliveryFile型に変換する。
        /// 親エンティティとして生成するため、子エンティティの情報はもたない
        /// </summary>
        /// <returns></returns>
        public Utility.Models.Entites.DtDeliveryFile ToParentModel(Type childType)
        {
            Utility.Models.Entites.DtDeliveryFile model = ToModelCommonPart();
            // 親子間の参照無限ループを避けるためにタイプチェック
            if (this.DtDeliveryGroup.LastOrDefault()?.GetType() != childType)
            {
                model.DtDeliveryGroup = this.DtDeliveryGroup.Select(y => y.ToChildModel(this.GetType())).ToHashSet();
            }
            if (this.DtDeliveryModel.LastOrDefault()?.GetType() != childType)
            {
                model.DtDeliveryModel = this.DtDeliveryModel.Select(y => y.ToChildModel(this.GetType())).ToHashSet();
            }
            model.MtDeliveryFileType = this.DeliveryFileTypeS?.ToParentModel(this.GetType());
            model.MtInstallType = this.InstallTypeS?.ToParentModel(this.GetType());
    
            return model;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtDeliveryFile型に変換する。
        /// 子エンティティとして生成するため、親エンティティの情報をもたない
        /// </summary>
        /// <returns></returns>
        public Utility.Models.Entites.DtDeliveryFile ToChildModel(Type parentType)
        {
            Utility.Models.Entites.DtDeliveryFile model = ToModelCommonPart();
            model.DtDeliveryGroup = this.DtDeliveryGroup.Select(y => y.ToChildModel(this.GetType())).ToHashSet();
            model.DtDeliveryModel = this.DtDeliveryModel.Select(y => y.ToChildModel(this.GetType())).ToHashSet();
            // 親子間の参照無限ループを避けるためにタイプチェック
            if (this.DeliveryFileTypeS?.GetType() != parentType)
            {
                model.MtDeliveryFileType = this.DeliveryFileTypeS?.ToParentModel(this.GetType());
            }
            if (this.InstallTypeS?.GetType() != parentType)
            {
                model.MtInstallType = this.InstallTypeS?.ToParentModel(this.GetType());
            }
    
            return model;
        }
    }
    
    /// <summary>
    /// DtDeliveryFileのメタデータクラス
    /// </summary>
    public  class DtDeliveryFileModelMetaData
    {
        [Key]
        [Required(ErrorMessage = "Sid is required.")]
        public long Sid { get; set; }
    
        [Required(ErrorMessage = "DeliveryFileTypeSid is required.")]
        public long DeliveryFileTypeSid { get; set; }
    
        [StringLength(300, ErrorMessage = "FilePath length should be less than 300 symbols.")]
        public string FilePath { get; set; }
    
        [StringLength(30, ErrorMessage = "Version length should be less than 30 symbols.")]
        [RegularExpression(Utility.Const.AsciiCodeCharactersReg, ErrorMessage = "Version is only allowed for ASCII code characters.")]
        public string Version { get; set; }
    
        [StringLength(600, ErrorMessage = "InstallableVersion length should be less than 600 symbols.")]
        [RegularExpression(Utility.Const.AsciiCodeCharactersReg, ErrorMessage = "InstallableVersion is only allowed for ASCII code characters.")]
        public string InstallableVersion { get; set; }
    
        [StringLength(200, ErrorMessage = "Description length should be less than 200 symbols.")]
        public string Description { get; set; }
    
        [StringLength(45, ErrorMessage = "InformationId length should be less than 45 symbols.")]
        public string InformationId { get; set; }
    
        [Required(ErrorMessage = "CreateDatetime is required.")]
        public System.DateTime CreateDatetime { get; set; }
    
        [Required(ErrorMessage = "UpdateDatetime is required.")]
        public System.DateTime UpdateDatetime { get; set; }
    
        [Required(ErrorMessage = "RowVersion is required.")]
        [MaxLength(8, ErrorMessage = "RowVersion length should be less than 8 elements.")]
        public byte[] RowVersion { get; set; }
    
    }
}
