//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはテンプレートから生成されました。
//
//     このファイルを手動で変更すると、アプリケーションで予期しない動作が発生する可能性があります。
//     このファイルに対する手動の変更は、コードが再生成されると上書きされます。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Rms.Server.Core.DBAccessor.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using Microsoft.AspNetCore.Mvc;
    
    /// <summary>
    /// DtStorageConfigクラス
    /// </summary>
    [ModelMetadataType(typeof(DtStorageConfigModelMetaData))]
    public partial class DtStorageConfig
    {
        /// <summary>
        /// コンストラクタ
        /// </summary>
        public DtStorageConfig()
        {
        }
    
        /// <summary>
        /// コンストラクタ
        /// </summary>
        /// <param name="model">Utility.Models.Entites.DtStorageConfigのインスタンス</param>
        public DtStorageConfig(Utility.Models.Entites.DtStorageConfig model)
        {
            this.Sid = model.Sid;
            this.Name = model.Name;
            this.Url = model.Url;
            this.Sas = model.Sas;
            this.CreateDatetime = model.CreateDatetime;
            this.UpdateDatetime = model.UpdateDatetime;
        }
    
        /// <summary>
        /// このインスタンスの各プロパティに、引数に指定されたDtStorageConfigのプロパティの値をコピーする
        /// </summary>
        /// <param name="entity">コピー元のDtStorageConfig</param>
        public void CopyFrom(DtStorageConfig entity)
        {
            this.Sid = entity.Sid;
            this.Name = entity.Name;
            this.Url = entity.Url;
            this.Sas = entity.Sas;
            this.CreateDatetime = entity.CreateDatetime;
            this.UpdateDatetime = entity.UpdateDatetime;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtStorageConfig型に変換する。
        /// 各変換メソッド共通部分
        /// </summary>
        /// <returns></returns>
        private Utility.Models.Entites.DtStorageConfig ToModelCommonPart()
        {
            Utility.Models.Entites.DtStorageConfig model = new Utility.Models.Entites.DtStorageConfig();
            model.Sid = this.Sid;
            model.Name = this.Name;
            model.Url = this.Url;
            model.Sas = this.Sas;
            model.CreateDatetime = this.CreateDatetime;
            model.UpdateDatetime = this.UpdateDatetime;
            return model;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtStorageConfig型に変換する。
        /// </summary>
        /// <returns></returns>
        public Utility.Models.Entites.DtStorageConfig ToModel()
        {
            Utility.Models.Entites.DtStorageConfig model = ToModelCommonPart();
    
            return model;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtStorageConfig型に変換する。
        /// 親エンティティとして生成するため、子エンティティの情報はもたない
        /// </summary>
        /// <returns></returns>
        public Utility.Models.Entites.DtStorageConfig ToParentModel(Type childType)
        {
            Utility.Models.Entites.DtStorageConfig model = ToModelCommonPart();
    
            return model;
        }
    
        /// <summary>
        /// このインスタンスを、それと同等なUtility.Models.Entites.DtStorageConfig型に変換する。
        /// 子エンティティとして生成するため、親エンティティの情報をもたない
        /// </summary>
        /// <returns></returns>
        public Utility.Models.Entites.DtStorageConfig ToChildModel(Type parentType)
        {
            Utility.Models.Entites.DtStorageConfig model = ToModelCommonPart();
            // 親子間の参照無限ループを避けるためにタイプチェック
    
            return model;
        }
    }
    
    /// <summary>
    /// DtStorageConfigのメタデータクラス
    /// </summary>
    public  class DtStorageConfigModelMetaData
    {
        [Key]
        [Required(ErrorMessage = "Sid is required.")]
        public long Sid { get; set; }
    
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(30, ErrorMessage = "Name length should be less than 30 symbols.")]
        [RegularExpression(Utility.Const.AsciiCodeCharactersReg, ErrorMessage = "Name is only allowed for ASCII code characters.")]
        public string Name { get; set; }
    
        [StringLength(64, ErrorMessage = "Url length should be less than 64 symbols.")]
        [RegularExpression(Utility.Const.AsciiCodeCharactersReg, ErrorMessage = "Url is only allowed for ASCII code characters.")]
        public string Url { get; set; }
    
        [StringLength(200, ErrorMessage = "Sas length should be less than 200 symbols.")]
        [RegularExpression(Utility.Const.AsciiCodeCharactersReg, ErrorMessage = "Sas is only allowed for ASCII code characters.")]
        public string Sas { get; set; }
    
        [Required(ErrorMessage = "CreateDatetime is required.")]
        public System.DateTime CreateDatetime { get; set; }
    
        [Required(ErrorMessage = "UpdateDatetime is required.")]
        public System.DateTime UpdateDatetime { get; set; }
    
    }
}
